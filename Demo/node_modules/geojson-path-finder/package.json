{
  "_from": "geojson-path-finder",
  "_id": "geojson-path-finder@1.5.2",
  "_inBundle": false,
  "_integrity": "sha512-hQl9LTNpqYNUeVhiKwS92FXEw8gk/Tx6i1OD/L9UfxbWqtoS3zhD6ZzQPNTCgQsu50DhsC09VL5vub7I0j/hQg==",
  "_location": "/geojson-path-finder",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "geojson-path-finder",
    "fetchSpec": "latest",
    "name": "geojson-path-finder",
    "raw": "geojson-path-finder",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/geojson-path-finder/-/geojson-path-finder-1.5.2.tgz",
  "_shasum": "812cdfb43dc0732559fcae2cfe9e6c02b6ed02ca",
  "_shrinkwrap": null,
  "_spec": "geojson-path-finder",
  "_where": "C:\\Users\\Sean\\Desktop\\foxhole-router\\Demo",
  "author": {
    "email": "per@liedman.net",
    "name": "Per Liedman"
  },
  "bugs": {
    "url": "https://github.com/perliedman/geojson-path-finder/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@turf/distance": "^6.0.1",
    "@turf/explode": "^5.1.0",
    "tap": "^12.0.0",
    "tap-spec": "^5.0.0",
    "tinyqueue": "^2.0.0",
    "turf-point": "^2.0.1"
  },
  "deprecated": false,
  "description": "Find shortest path through a network of GeoJSON",
  "devDependencies": {},
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/perliedman/geojson-path-finder",
  "license": "ISC",
  "main": "index.js",
  "name": "geojson-path-finder",
  "optionalDependencies": {},
  "readme": "GeoJSON Path Finder\n===================\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/perliedman/geojson-path-finder.svg)](https://greenkeeper.io/) [![Build status](https://travis-ci.org/perliedman/geojson-path-finder.svg?branch=master)](https://travis-ci.org/perliedman/geojson-path-finder)\n\nFind shortest path through a network of GeoJSON.\n\nGiven a network of GeoJSON `LineString`s, GeoJSON Path Finder will find the shortest path between two points in the network. This might be useful for automatic route searches in smaller networks, where setting up a real route planner like OSRM is too much work,\nor you simply need to do everything on the client.\n\nSee the [GeoJSON Path Finder demo](http://www.liedman.net/geojson-path-finder/).\n\n## Installing\n\n```\nnpm install --save geojson-path-finder\n```\n\n## API\n\nCreate a path finding object:\n\n```javascript\nvar PathFinder = require('geojson-path-finder'),\n    geojson = require('./network.json');\n\nvar pathFinder = new PathFinder(geojson);\n```\n\nThe GeoJSON object should be a `FeatureCollection` of `LineString` features. The network will be built\ninto a topology, so that lines that start and end, or cross, at the same coordinate are joined such that\nyou can find a path from one feature to the other.\n\nTo find the shortest path between two coordinates:\n\n```javascript\nvar path = pathfinder.findPath(start, finish);\n```\n\nWhere `start` and `finish` are two GeoJSON `point` features.\n\nIf a route can be found, an object with two properties: `path` and `weight` is returned, where `path` \nis the coordinates the path runs through, and `weight` is the total weight (distance) of the path.\n\n### `PathFinder` options\n\nThe `PathFinder` constructor takes an optional seconds parameter containing `options` that you can\nuse to control the behaviour of the path finder. Available options:\n\n* `weightFn` controls how the weight (or cost) of travelling between two vertices is calculated;\n  by default, the geographic distance between the coordinates is calculated and used as weight;\n  see [Weight functions](#weight-functions) below for details\n* `precision` (default `1e-5`) controls the tolerance for how close vertices in the GeoJSON can be\n  before considered being the same vertice; you can say that coordinates closer than this will be\n  snapped together into one coordinate\n* `edgeDataReduceFn` can optionally be used to store data present in the GeoJSON on each edge of \n  the routing graph; typically, this can be used for storing things like street names; if specified,\n  the reduced data is present on found paths under the `edgeDatas` property\n* `edgeDataSeed` is the seed used when reducing edge data with the `edgeDataReduceFn` above\n\n## Weight functions\n\nBy default, the _cost_ of going from one node in the network to another is determined simply by\nthe geographic distance between the two nodes. This means that, by default, shortest paths will be found.\nYou can however override this by providing a cost calculation function through the `weightFn` option:\n\n```javascript\nvar pathFinder = new PathFinder(geojson, {\nweightFn: function(a, b, props) {\nvar dx = a[0] - b[0];\nvar dy = a[1] - b[1];\nreturn Math.sqrt(dx * dx + dy * dy);\n}\n});\n```\n\nThe weight function is passed two coordinate arrays (in GeoJSON axis order), as well as the feature properties\nthat are associated with this feature, and should return either:\n\n* a numeric value for the cost of travelling between the two coordinates; in this case, the cost is assumed\n  to be the same going from `a` to `b` as going from `b` to `a`\n* an object with two properties: `forward` and `backward`; in this case,\n  `forward` denotes the cost of going from `a` to `b`, and\n  `backward` the cost of going from `b` to `a`; setting either\n  to `0`, `null` or `undefined` will prevent taking that direction,\n  the segment will be a oneway.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/perliedman/geojson-path-finder.git"
  },
  "scripts": {
    "test": "tap test/*.js | tap-spec"
  },
  "version": "1.5.2"
}
